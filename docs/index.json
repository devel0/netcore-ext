{
  "README.html": {
    "href": "README.html",
    "title": "netcore-ext | netcore-ext",
    "keywords": "netcore-ext .NET core extensions API Documentation Sources Changelog Quickstart Unit tests How this project was built Documentation (github pages) Build and view locally Build and commit into docs branch Quickstart dotnet new console --use-program-main -n test cd test dotnet add package netcore-ext dotnet run copy usings.ext.cs global usings to the source folder extension methods using SearchAThing.Ext; toolkit methods using static SearchAThing.Ext.Toolkit; Unit tests dotnet test to debug from vscode just run debug test from code lens balloon How this project was built mkdir netcore-ext cd netcore-ext mkdir -p examples src/ext cd src dotnet new classlib -n netcore-ext -f netstandard2.1 --langVersion 11 mv netcore-ext ext cd .. dotnet new xunit -n test cd test dotnet add reference ../ext/netcore-ext.csproj # enable test coverage collectorx # to view in vscode ( \"Coverage Gutters\" ext ) run `./test-coverage` then `C-S-p` Coverage Gutters: Watch dotnet add package coverlet.collector dotnet add package coverlet.msbuild cd .. cd .. dotnet new sln dotnet sln add src/ext src/test examples/example01 dotnet build dotnet test Documentation (github pages) Configured through Settings/Pages on Branch docs ( path /docs ). while main branch exclude \"docs\" with .gitignore the docs branch doesn't Build and view locally ./doc build ./doc serve ./doc view Build and commit into docs branch ./doc commit"
  },
  "api/SearchAThing.Ext.ColumnAlignment.html": {
    "href": "api/SearchAThing.Ext.ColumnAlignment.html",
    "title": "Enum ColumnAlignment | netcore-ext",
    "keywords": "Enum ColumnAlignment Namespace SearchAThing.Ext Assembly netcore-ext.dll generic enum for column alignment description public enum ColumnAlignment Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Ext.ToBytes<T>(T) Fields center = 1 left = 0 right = 2"
  },
  "api/SearchAThing.Ext.CopyFromCustomDelegate.html": {
    "href": "api/SearchAThing.Ext.CopyFromCustomDelegate.html",
    "title": "Delegate CopyFromCustomDelegate | netcore-ext",
    "keywords": "Delegate CopyFromCustomDelegate Namespace SearchAThing.Ext Assembly netcore-ext.dll public delegate (bool include, bool customValue, object valueIfCustom) CopyFromCustomDelegate(PropertyInfo pi, object? val) Parameters pi PropertyInfo val object Returns (bool include, bool customValue, object valueIfCustom) Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>)"
  },
  "api/SearchAThing.Ext.ExecResult.html": {
    "href": "api/SearchAThing.Ext.ExecResult.html",
    "title": "Class ExecResult | netcore-ext",
    "keywords": "Class ExecResult Namespace SearchAThing.Ext Assembly netcore-ext.dll results of process executio public class ExecResult Inheritance object ExecResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Constructors ExecResult(int, string, string) public ExecResult(int exitCode, string output, string error) Parameters exitCode int output string error string Properties Error stderr of process execution if redirection was used public string Error { get; } Property Value string ExitCode exitcode of process execuition public int ExitCode { get; } Property Value int Output stdout of process execution if redirection was used public string Output { get; } Property Value string"
  },
  "api/SearchAThing.Ext.Ext.html": {
    "href": "api/SearchAThing.Ext.Ext.html",
    "title": "Class Ext | netcore-ext",
    "keywords": "Class Ext Namespace SearchAThing.Ext Assembly netcore-ext.dll public static class Ext Inheritance object Ext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Act<T>(T, Action<T>) Allow to apply some action on the object inline returning the same object. eg dxf.Entities.Add(new Line3D().DxfEntity.Act(ent => ent.Color = AciColor.Red)) public static T Act<T>(this T obj, Action<T> setter) Parameters obj T setter Action<T> Returns T Type Parameters T Align(string, int, ColumnAlignment) align given string into given size with alignment specified. resulting string will fit into given size with spaces or truncated if not enough for given size vs str length public static string Align(this string str, int size, ColumnAlignment align = ColumnAlignment.left) Parameters str string size int align ColumnAlignment Returns string Clamp(double, double, double) return clamped number between [min,max] interval public static double Clamp(this double n, double min, double max) Parameters n double number min double min value admissible max double max value admissible Returns double n if between [min,max] otherwise min when n less than min or max when n great than max Clamp(float, float, float) return clamped number between [min,max] interval public static float Clamp(this float n, float min, float max) Parameters n float number min float min value admissible max float max value admissible Returns float n if between [min,max] otherwise min when n less than min or max when n great than max CompareTol(double, double, double) public static int CompareTol(this double x, double tol, double y) Parameters x double tol double y double Returns int ComputeMD5Sum(string) compute MD5Sum of given input public static string ComputeMD5Sum(string input) Parameters input string Returns string ContainsIgnoreCase(string, string) check if given string contains the part ( ignoring case ) public static bool ContainsIgnoreCase(this string str, string part) Parameters str string part string Returns bool CreateGetterSetter<T, V>(Expression<Func<T, V>>) create getter (func) and setter (action) from given lambda expr public static (Func<T, V> getter, Action<T, V> setter) CreateGetterSetter<T, V>(this Expression<Func<T, V>> expr) Parameters expr Expression<Func<T, V>> Returns (Func<T, V> getter, Action<T, V> setter) Type Parameters T V CreateGetterSetter<T, V>(Expression<Func<T, V>>, out MemberExpression) create getter (func) and setter (action) from given lambda expr, and retrieve member expression public static (Func<T, V> getter, Action<T, V> setter) CreateGetterSetter<T, V>(this Expression<Func<T, V>> expr, out MemberExpression mExpr) Parameters expr Expression<Func<T, V>> mExpr MemberExpression Returns (Func<T, V> getter, Action<T, V> setter) Type Parameters T V Distinct<T, TKey>(IEnumerable<T>, Func<T, TKey>) distinct with lambda public static IEnumerable<T> Distinct<T, TKey>(this IEnumerable<T> lst, Func<T, TKey> keySelector) Parameters lst IEnumerable<T> keySelector Func<T, TKey> Returns IEnumerable<T> Type Parameters T TKey EqualsAutoTol(double, double, double) Returns true if two numbers are equals using a default tolerance of 1e-6 about the smaller one. public static bool EqualsAutoTol(this double x, double y, double precision = 1E-06) Parameters x double y double precision double Returns bool EqualsTol(double, double, double) true if ( |x-y| LTE tol ) public static bool EqualsTol(this double x, double tol, double y) Parameters x double tol double y double Returns bool Export(double[]) export to a string ( invariant ) comma separated public static string Export(this double[] ary) Parameters ary double[] Returns string Fn<T, U>(T, Func<T, U>) Allow to tranform the object into other type. eg. intvar.Fn((x) => (x == 0) ? \"zero\" : \"non-zero\") public static U Fn<T, U>(this T obj, Func<T, U> fn) Parameters obj T fn Func<T, U> Returns U Type Parameters T U ForEach<T>(IEnumerable<T>, Action<T>) performs given action on enumerable items public static void ForEach<T>(this IEnumerable<T> en, Action<T> act) Parameters en IEnumerable<T> act Action<T> Type Parameters T Foreach<T>(IEnumerable<T>, Action<T>) Allow to apply an action foreach enum objects public static IEnumerable<T> Foreach<T>(this IEnumerable<T> en, Action<T> action) Parameters en IEnumerable<T> action Action<T> Returns IEnumerable<T> Type Parameters T GreatThanOrEqualsTol(double, double, double) true if (x GT y) AND ( |x-y| LTE tol ) public static bool GreatThanOrEqualsTol(this double x, double tol, double y) Parameters x double tol double y double Returns bool GreatThanTol(double, double, double) true if (x GT y) AND NOT ( |x-y| LTE tol ) public static bool GreatThanTol(this double x, double tol, double y) Parameters x double tol double y double Returns bool HumanReadable(long, bool, long, int) Returns a human readable bytes length. (eg. 1000, 1K, 1M, 1G, 1T) if onlyBytesUnit is set to false it will enable representation through K, M, G, T suffixes public static string HumanReadable(this long bytes, bool onlyBytesUnit = true, long bytesMultiple = 1, int decimals = 1) Parameters bytes long onlyBytesUnit bool bytesMultiple long decimals int Returns string Import(string) parse given array of doubles ( invariant ) comma separated public static double[] Import(this string ary) Parameters ary string Returns double[] InvDoubleParse(string) Invariant culture double parse public static double InvDoubleParse(this string str) Parameters str string Returns double InvariantDate(DateTime, string) return yyyy-MM-dd representation public static string InvariantDate(this DateTime dt, string sep = \"-\") Parameters dt DateTime sep string Returns string InvariantTime(DateTime, string) return HH:mm:ss representation public static string InvariantTime(this DateTime dt, string sep = \":\") Parameters dt DateTime sep string Returns string InvarianteDateTime(DateTime, string, string) return yyyy-MM-dd HH:mm.ss representation public static string InvarianteDateTime(this DateTime dt, string datesep = \"-\", string timesep = \":\") Parameters dt DateTime datesep string timesep string Returns string IsInRange(double, double, string) eval if a number fits in given range eg. \"[0, 10)\" are numbers from 0 (included) to 10 (excluded) \"[10, 20]\" are numbers from 10 (included) to 20 (included) \"(30,)\" are numbers from 30 (excluded) to +infinity public static bool IsInRange(this double nr, double tol, string range) Parameters nr double tol double range string Returns bool Latest(string, int, string) convert a string that exceed N given characters length to {prefix}{latest N chars} public static string Latest(this string str, int last_n_chars, string prefix_if_exceed = \"...\") Parameters str string last_n_chars int prefix_if_exceed string Returns string LessThanOrEqualsTol(double, double, double) true if (x LT y) AND ( |x-y| LTE tol ) public static bool LessThanOrEqualsTol(this double x, double tol, double y) Parameters x double tol double y double Returns bool LessThanTol(double, double, double) true if (x LT y) AND NOT ( |x-y| LTE tol ) public static bool LessThanTol(this double x, double tol, double y) Parameters x double tol double y double Returns bool Lines(string, bool) Smart line splitter that split a text into lines whatever unix or windows line ending style. By default its remove empty lines. public static IEnumerable<string> Lines(this string txt, bool removeEmptyLines = true) Parameters txt string string to split into lines removeEmptyLines bool If true remove empty lines. Returns IEnumerable<string> MMToEMU(double) 10mm = 360000 EMU mm = 36000 EMU public static int MMToEMU(this double mm) Parameters mm double Returns int MMToEMU(int) 10mm = 360000 EMU mm = 36000 EMU public static int MMToEMU(this int mm) Parameters mm int Returns int MMToPt(double) font size half_point = hp = 1/144 inch = 25.4/144 mm pt = hp/2 pt = 225.4/144mm public static double MMToPt(this double mm) Parameters mm double Returns double MMToTwip(double) convert mm to twip twip = 1/20 pp = 1/20 * 1/72 in = 1/1440 in = 1/1440 * 25.4 mm mm = 1440/25.4 twip public static int MMToTwip(this double mm) Parameters mm double Returns int MMToTwip(int) convert mm to twip twip = 1/20 pp = 1/20 * 1/72 in = 1/1440 in = 1/1440 * 25.4 mm mm = 1440/25.4 twip public static int MMToTwip(this int mm) Parameters mm int Returns int MRound(double, double) Round the given value using the multiple basis public static double MRound(this double value, double multiple) Parameters value double multiple double Returns double MRound(double, double?) Round the given value using the multiple basis public static double MRound(this double value, double? multiple) Parameters value double multiple double? Returns double MRound(double?, double) Round the given value using the multiple basis if null return null public static double? MRound(this double? value, double multiple) Parameters value double? multiple double Returns double? Magnitude(double) Magnitude of given number. (eg. 190 -> 1.9e2 -> 2) (eg. 0.0034 -> 3.4e-3 -> -3) public static int Magnitude(this double value) Parameters value double Returns int MatchesFilter(IEnumerable<string>, string, bool) Checks whatever fields matches given filter all words in any of inputs. ex. fields={ \"abc\", \"de\" } filter=\"a\" results: true ex. fields={ \"abc\", \"de\" } filter=\"a d\" results: true ex. fields={ \"abc\", \"de\" } filter=\"a f\" results: false autoskips null fields check; returns true if filter empty public static bool MatchesFilter(this IEnumerable<string> fields, string filter, bool ignoreCase = true) Parameters fields IEnumerable<string> filter string ignoreCase bool Returns bool Mean(IEnumerable<double>) Mean of given numbers public static double Mean(this IEnumerable<double> set) Parameters set IEnumerable<double> Returns double Mean(IEnumerable<Vector3>) mean of given vectors public static Vector3 Mean(this IEnumerable<Vector3> vectors) Parameters vectors IEnumerable<Vector3> Returns Vector3 MinMax(IEnumerable<double>) Retrieve min, max at once. public static (double min, double max)? MinMax(this IEnumerable<double> values) Parameters values IEnumerable<double> Returns (double min, double max)? (min,max) of given set of values. MinMax(IEnumerable<float>) Retrieve min, max at once. public static (float min, float max)? MinMax(this IEnumerable<float> values) Parameters values IEnumerable<float> Returns (float min, float max)? (min,max) of given set of values. NormalizeFilename(string, char) public static string NormalizeFilename(this string filename, char subst = '_') Parameters filename string subst char Returns string NormalizeWorksheetName(string) convert invalid worksheet characters :/?*[]' into underscore public static string NormalizeWorksheetName(this string s) Parameters s string Returns string ParseInt(string) public static int ParseInt(this string s) Parameters s string Returns int Pct(double) convert given percent 0..100 to fiftieths of a Percent public static int Pct(this double percent) Parameters percent double Returns int PtToHalfPoint(double) font size hp = 2*pt public static double PtToHalfPoint(this double pt) Parameters pt double Returns double PtToMM(double) font size half_point = hp = 1/144 inch = 25.4/144 mm pt = hp/2 mm = 144/(2*25.4) pt public static double PtToMM(this double pt) Parameters pt double Returns double RegexMatch(string, string, RegexOptions) retrieve nr. of occurrence of given pattern through regex public static int RegexMatch(this string s, string pattern, RegexOptions opt = RegexOptions.None) Parameters s string pattern string opt RegexOptions Returns int Repeat(string, int) Repeat given string for cnt by concatenate itself public static string Repeat(this string s, int cnt) Parameters s string cnt int Returns string Round(Vector2, int) round vector components to given digits public static Vector2 Round(this Vector2 v, int digits) Parameters v Vector2 digits int Returns Vector2 Round(Vector3, int) round vector components to given digits public static Vector3 Round(this Vector3 v, int digits) Parameters v Vector3 digits int Returns Vector3 Round(Vector4, int) round vector components to given digits public static Vector4 Round(this Vector4 v, int digits) Parameters v Vector4 digits int Returns Vector4 RouteFirst<T>(IEnumerable<T>, T) from given elements return the sequence starting from wantedFirstElement and continue until end then restart from begin until wantedFirstElement excluded pre: wantedFirstElement must in the list unit test public static IEnumerable<T> RouteFirst<T>(this IEnumerable<T> lst, T wantedFirstElement) Parameters lst IEnumerable<T> wantedFirstElement T Returns IEnumerable<T> Type Parameters T Sign(double) returns 1.0 if n>=0 -1 otherwise public static double Sign(this double n) Parameters n double Returns double Sign(double, double) returns 0,+1,-1 depending on the sign. (0) : if given number EqualsTol(zeroTol, 0) (+1) : if given number positive; (-1) : if given number negative; public static int Sign(this double n, double zeroTol) Parameters n double number to test zeroTol double tolerance to consider it zero Returns int 0,+1,-1 Sign(int) returns 1.0 if n>=0 -1 otherwise public static double Sign(this int n) Parameters n int Returns double SmartDoubleParse(string) Parse string that represent number without knowing current culture so that it can parse \"1.2\" or \"1,2\" equivalent to 1.2 it will throw error more than one dot or comma found public static double SmartDoubleParse(this string str) Parameters str string Returns double Sort<TSource, TKey>(ObservableCollection<TSource>, Func<TSource, TKey>, bool) sort obc public static void Sort<TSource, TKey>(this ObservableCollection<TSource> obc, Func<TSource, TKey> keySelector, bool descending = false) Parameters obc ObservableCollection<TSource> observable collection to sort keySelector Func<TSource, TKey> fn to select key descending bool if true then sort descending Type Parameters TSource TKey Split(string, string) split string with given separator string public static string[] Split(this string str, string sepStr) Parameters str string sepStr string Returns string[] SplitBy<T, V>(IEnumerable<T>, Func<T, V>) Separate into a set of lists given items ensuring no same key object exists in the same list. public static List<List<T>> SplitBy<T, V>(this IEnumerable<T> set, Func<T, V> splitBySelector) Parameters set IEnumerable<T> Input element set splitBySelector Func<T, V> Function that retrieve key from item. Returns List<List<T>> List of list of items where no dup key in the same list. Type Parameters T Type of items to split. V Type of item key. Stringify(double, int) Return an invariant string representation rounded to given dec. public static string Stringify(this double x, int dec) Parameters x double dec int Returns string StripBegin(string, char, bool) Returns the given string stripped from the given part if exists at beginning. public static string StripBegin(this string str, char c, bool ignoreCase = false) Parameters str string c char ignoreCase bool Returns string StripBegin(string, string, bool) Returns the given string stripped from the given part if exists at beginning. public static string StripBegin(this string str, string partToStrip, bool ignoreCase = false) Parameters str string partToStrip string ignoreCase bool Returns string StripEnd(string, char, bool) Returns the given string stripped from the given part if exists at end. public static string StripEnd(this string str, char c, bool ignoreCase = false) Parameters str string c char ignoreCase bool Returns string StripEnd(string, string, bool) Returns the given string stripped from the given part if exists at end. public static string StripEnd(this string str, string partToStrip, bool ignoreCase = false) Parameters str string partToStrip string ignoreCase bool Returns string TableFormat(IEnumerable<IEnumerable<string>>, IEnumerable<string>?, IEnumerable<ColumnAlignment>?, int) formats given rows into a table aligning by columns. optional column spacing and alignment can be specified. public static string TableFormat(this IEnumerable<IEnumerable<string>> src, IEnumerable<string>? headers = null, IEnumerable<ColumnAlignment>? aligns = null, int columnSpacing = 3) Parameters src IEnumerable<IEnumerable<string>> headers IEnumerable<string> aligns IEnumerable<ColumnAlignment> columnSpacing int Returns string ToBytes<T>(T) retrieve a binary representation of given struct public static byte[] ToBytes<T>(this T obj) where T : struct Parameters obj T Returns byte[] Type Parameters T ToDeg(double) convert given angle(rad) to deg public static double ToDeg(this double angleRad) Parameters angleRad double angle (rad) Returns double angle (deg) ToDeg(float) convert given angle(rad) to deg public static float ToDeg(this float angleRad) Parameters angleRad float angle (rad) Returns float angle (deg) ToHashSetExt<T>(IEnumerable<T>) Create an HashSet from given enumerable. (net standard 2.0 ext) public static HashSet<T> ToHashSetExt<T>(this IEnumerable<T> set) Parameters set IEnumerable<T> Returns HashSet<T> Type Parameters T ToObservableCollection<T>(IEnumerable<T>) Convert given enumerable to observable collection public static ObservableCollection<T> ToObservableCollection<T>(this IEnumerable<T> en) Parameters en IEnumerable<T> Returns ObservableCollection<T> Type Parameters T ToRad(double) convert given angle(deg) to rad public static double ToRad(this double angleGrad) Parameters angleGrad double angle (deg) Returns double angle (radians) ToRad(float) convert given angle(deg) to rad public static float ToRad(this float angleDeg) Parameters angleDeg float angle (deg) Returns float angle (radians) ToReadOnlyList<T>(IEnumerable<T>) Convert given IEnumerable into IReadOnlyList with type convert if given argument was already a IReadOnlyList or creating a new object List and returning as IReadOnlyList public static IReadOnlyList<T> ToReadOnlyList<T>(this IEnumerable<T> en) Parameters en IEnumerable<T> enumerable to convert to IReadOnlyList Returns IReadOnlyList<T> IReadOnlyList ( may the same object reference or a new depending if the argument was already a IReadOnlyList or not ) Type Parameters T typename ToString(double, int) format number so that show given significant digits. (eg. 2.03 with significantDigits=4 create \"2.0300\") public static string ToString(this double d, int significantDigits) Parameters d double significantDigits int Returns string ToStringWrapper(StringBuilder) public static StringWrapper ToStringWrapper(this StringBuilder sb) Parameters sb StringBuilder Returns StringWrapper ToVector3(Vector2, float) convert x,y to x,y,z public static Vector3 ToVector3(this Vector2 v, float z = 0) Parameters v Vector2 z float Returns Vector3 TrimNonNumericCharacters(string) removes all characters that aren't 0-9 dot or comma public static string TrimNonNumericCharacters(this string s) Parameters s string Returns string TwipToMM(int) convert twip to mm mm = 1440/25.4 twip twip = 25.4/1440 mm public static double TwipToMM(this int twip) Parameters twip int Returns double TwipToMM(uint) convert twip to mm mm = 1440/25.4 twip twip = 25.4/1440 mm public static double TwipToMM(this uint twip) Parameters twip uint Returns double UnspecifiedAsLocalDateTime(DateTime) if given dt has unspecified kind rectified to Local without any conversion public static DateTime UnspecifiedAsLocalDateTime(this DateTime dt) Parameters dt DateTime Returns DateTime UnspecifiedAsUTCDateTime(DateTime) if given dt has unspecified kind rectifies to UTC without any conversion public static DateTime UnspecifiedAsUTCDateTime(this DateTime dt) Parameters dt DateTime Returns DateTime WildcardMatch(string, string, bool) return true if given string matches the given pattern the asterisk '*' character replace any group of chars the question '?' character replace any single character public static bool WildcardMatch(this string str, string pattern, bool caseSentitive = true) Parameters str string pattern string caseSentitive bool Returns bool WildcardToRegex(string) convert wildcard pattern to regex the asterisk '*' character replace any group of chars the question '?' character replace any single character public static string WildcardToRegex(this string pattern) Parameters pattern string Returns string WithIndexIsLast<T>(IEnumerable<T>) enumerable extension to enumerate itself into an (item, idx, isLast) set public static IEnumerable<(T item, int idx, bool isLast)> WithIndexIsLast<T>(this IEnumerable<T> en) Parameters en IEnumerable<T> Returns IEnumerable<(T item, int idx, bool isLast)> Type Parameters T Examples \\snippet with-index-is-last/Program.cs example WithIndex<T>(IEnumerable<T>) enumerable extension to enumerate itself into an (item, idx) set public static IEnumerable<(T item, int idx)> WithIndex<T>(this IEnumerable<T> en) Parameters en IEnumerable<T> Returns IEnumerable<(T item, int idx)> Type Parameters T WithNextPrimitive<T>(IEnumerable<T>, bool) enumerate given items returning a tuple with null ( for last hit ) next element public static IEnumerable<(T item, T? next, int itemIdx, bool isLast)> WithNextPrimitive<T>(this IEnumerable<T> en, bool repeatFirstAtEnd = false) where T : struct Parameters en IEnumerable<T> repeatFirstAtEnd bool Returns IEnumerable<(T item, T? next, int itemIdx, bool isLast)> Type Parameters T Remarks unit test WithNext<T>(IEnumerable<T>, bool) enumerate given items returning a tuple (item,next,isLast) with next=null for last element or next=first if repeatFirstAtEnd=true on latest el public static IEnumerable<(T item, T? next, int itemIdx, bool isLast)> WithNext<T>(this IEnumerable<T> en, bool repeatFirstAtEnd = false) where T : class Parameters en IEnumerable<T> input set repeatFirstAtEnd bool last enumerated result will (last,first,true) Returns IEnumerable<(T item, T next, int itemIdx, bool isLast)> Type Parameters T Remarks unit test WithPrevNextPrimitive<T>(IEnumerable<T>, bool) enumerate given items returning a tuple (prev,item,next,isLast) with prev=null for first element with next=null for last element or next=first if repeatFirstAtEnd=true on latest el public static IEnumerable<(T? prev, T item, T? next, int itemIdx, bool isLast)> WithPrevNextPrimitive<T>(this IEnumerable<T> en, bool repeatFirstAtEnd = false) where T : struct Parameters en IEnumerable<T> input set repeatFirstAtEnd bool last enumerated result will (last,first,true) Returns IEnumerable<(T? prev, T item, T? next, int itemIdx, bool isLast)> Type Parameters T Remarks unit test WithPrevNext<T>(IEnumerable<T>, bool) enumerate given items returning a tuple (prev,item,next,isLast) with prev=null for first element with next=null for last element or next=first if repeatFirstAtEnd=true on latest el public static IEnumerable<(T? prev, T item, T? next, int itemIdx, bool isLast)> WithPrevNext<T>(this IEnumerable<T> en, bool repeatFirstAtEnd = false) where T : class Parameters en IEnumerable<T> input set repeatFirstAtEnd bool last enumerated result will (last,first,true) Returns IEnumerable<(T prev, T item, T next, int itemIdx, bool isLast)> Type Parameters T Remarks unit test WithPrevPrimitive<T>(IEnumerable<T>) enumerate given items returning a tuple with nullable ( for first hit ) prev element public static IEnumerable<(T? prev, T item, int itemIdx)> WithPrevPrimitive<T>(this IEnumerable<T> en) where T : struct Parameters en IEnumerable<T> Returns IEnumerable<(T? prev, T item, int itemIdx)> Type Parameters T WithPrev<T>(IEnumerable<T>) enumerate given items returning a tuple with null ( for first hit ) prev element public static IEnumerable<(T? prev, T item, int itemIdx)> WithPrev<T>(this IEnumerable<T> en) where T : class Parameters en IEnumerable<T> Returns IEnumerable<(T prev, T item, int itemIdx)> Type Parameters T XY(Vector3) swizzle vector2 xy from vector3 public static Vector2 XY(this Vector3 v) Parameters v Vector3 Returns Vector2 XYZ(Vector4) swizzle vector3 xyz from vector4 public static Vector3 XYZ(this Vector4 v) Parameters v Vector4 Returns Vector3"
  },
  "api/SearchAThing.Ext.HSObservableCollection-1.html": {
    "href": "api/SearchAThing.Ext.HSObservableCollection-1.html",
    "title": "Class HSObservableCollection<T> | netcore-ext",
    "keywords": "Class HSObservableCollection<T> Namespace SearchAThing.Ext Assembly netcore-ext.dll ObservableCollection backed with hashset for the Contains test. public class HSObservableCollection<T> : ObservableCollection<T>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged Type Parameters T ObservableCollection backed with hashset for the Contains test. Inheritance object Collection<T> ObservableCollection<T> HSObservableCollection<T> Implements IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IList ICollection IEnumerable INotifyCollectionChanged INotifyPropertyChanged Inherited Members ObservableCollection<T>.BlockReentrancy() ObservableCollection<T>.CheckReentrancy() ObservableCollection<T>.Move(int, int) ObservableCollection<T>.MoveItem(int, int) ObservableCollection<T>.OnCollectionChanged(NotifyCollectionChangedEventArgs) ObservableCollection<T>.OnPropertyChanged(PropertyChangedEventArgs) ObservableCollection<T>.CollectionChanged ObservableCollection<T>.PropertyChanged Collection<T>.Add(T) Collection<T>.Clear() Collection<T>.CopyTo(T[], int) Collection<T>.GetEnumerator() Collection<T>.IndexOf(T) Collection<T>.Insert(int, T) Collection<T>.Remove(T) Collection<T>.RemoveAt(int) Collection<T>.Count Collection<T>.this[int] Collection<T>.Items object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Ext.Distinct<T, TKey>(IEnumerable<T>, Func<T, TKey>) Ext.ForEach<T>(IEnumerable<T>, Action<T>) Ext.Foreach<T>(IEnumerable<T>, Action<T>) Ext.RouteFirst<T>(IEnumerable<T>, T) Ext.SplitBy<T, V>(IEnumerable<T>, Func<T, V>) Ext.ToHashSetExt<T>(IEnumerable<T>) Ext.ToObservableCollection<T>(IEnumerable<T>) Ext.ToReadOnlyList<T>(IEnumerable<T>) Ext.WithIndexIsLast<T>(IEnumerable<T>) Ext.WithIndex<T>(IEnumerable<T>) Ext.Sort<TSource, TKey>(ObservableCollection<TSource>, Func<TSource, TKey>, bool) Remarks Normal behavior of obc still the same, ie. add the same object two times will result in obc increase in size with two references to the same object, and in the same way removing doesn't invalidate the presence until last occurrence of contains tested object will be removed. Constructors HSObservableCollection() public HSObservableCollection() HSObservableCollection(IEnumerable<T>) public HSObservableCollection(IEnumerable<T> items) Parameters items IEnumerable<T> Methods ClearItems() protected override void ClearItems() Contains(T) public bool Contains(T item) Parameters item T Returns bool InsertItem(int, T) protected override void InsertItem(int index, T item) Parameters index int item T RemoveItem(int) protected override void RemoveItem(int index) Parameters index int SetItem(int, T) protected override void SetItem(int index, T item) Parameters index int item T"
  },
  "api/SearchAThing.Ext.INotifyCollectionChanged2.html": {
    "href": "api/SearchAThing.Ext.INotifyCollectionChanged2.html",
    "title": "Interface INotifyCollectionChanged2 | netcore-ext",
    "keywords": "Interface INotifyCollectionChanged2 Namespace SearchAThing.Ext Assembly netcore-ext.dll public interface INotifyCollectionChanged2 Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Events ItemReplaced an item was replaced event EventHandler<(object? oldItem, object? newItem)>? ItemReplaced Event Type EventHandler<(object oldItem, object newItem)> ItemsAdded one or more items added event EventHandler<IList>? ItemsAdded Event Type EventHandler<IList> ItemsRemoved one or more items removed event EventHandler<IList>? ItemsRemoved Event Type EventHandler<IList>"
  },
  "api/SearchAThing.Ext.IReadOnlyHashSet-1.html": {
    "href": "api/SearchAThing.Ext.IReadOnlyHashSet-1.html",
    "title": "Interface IReadOnlyHashSet<T> | netcore-ext",
    "keywords": "Interface IReadOnlyHashSet<T> Namespace SearchAThing.Ext Assembly netcore-ext.dll public interface IReadOnlyHashSet<T> : IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters T Inherited Members IReadOnlyCollection<T>.Count IEnumerable<T>.GetEnumerator() Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Ext.Distinct<T, TKey>(IEnumerable<T>, Func<T, TKey>) Ext.ForEach<T>(IEnumerable<T>, Action<T>) Ext.Foreach<T>(IEnumerable<T>, Action<T>) Ext.RouteFirst<T>(IEnumerable<T>, T) Ext.SplitBy<T, V>(IEnumerable<T>, Func<T, V>) Ext.ToHashSetExt<T>(IEnumerable<T>) Ext.ToObservableCollection<T>(IEnumerable<T>) Ext.ToReadOnlyList<T>(IEnumerable<T>) Ext.WithIndexIsLast<T>(IEnumerable<T>) Ext.WithIndex<T>(IEnumerable<T>) Methods Contains(T) bool Contains(T x) Parameters x T Returns bool"
  },
  "api/SearchAThing.Ext.InternalError.html": {
    "href": "api/SearchAThing.Ext.InternalError.html",
    "title": "Class InternalError | netcore-ext",
    "keywords": "Class InternalError Namespace SearchAThing.Ext Assembly netcore-ext.dll InternalError exception public class InternalError : Exception, ISerializable Inheritance object Exception InternalError Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Constructors InternalError(string) Internal exception constructor, some assert failed public InternalError(string msg) Parameters msg string assert fail msg"
  },
  "api/SearchAThing.Ext.ObservableCollection2-1.html": {
    "href": "api/SearchAThing.Ext.ObservableCollection2-1.html",
    "title": "Class ObservableCollection2<T> | netcore-ext",
    "keywords": "Class ObservableCollection2<T> Namespace SearchAThing.Ext Assembly netcore-ext.dll ObservableCollection specialized with ItemsAdded, ItemsRemoved that allow to track for Clear, Remove, Insert, Set actions public class ObservableCollection2<T> : ObservableCollection<T>, IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged, INotifyCollectionChanged2 Type Parameters T ObservableCollection specialized with ItemsAdded, ItemsRemoved that allow to track for Clear, Remove, Insert, Set actions Inheritance object Collection<T> ObservableCollection<T> ObservableCollection2<T> Implements IList<T> ICollection<T> IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IList ICollection IEnumerable INotifyCollectionChanged INotifyPropertyChanged INotifyCollectionChanged2 Inherited Members ObservableCollection<T>.BlockReentrancy() ObservableCollection<T>.CheckReentrancy() ObservableCollection<T>.Move(int, int) ObservableCollection<T>.MoveItem(int, int) ObservableCollection<T>.OnCollectionChanged(NotifyCollectionChangedEventArgs) ObservableCollection<T>.OnPropertyChanged(PropertyChangedEventArgs) ObservableCollection<T>.CollectionChanged ObservableCollection<T>.PropertyChanged Collection<T>.Add(T) Collection<T>.Clear() Collection<T>.Contains(T) Collection<T>.CopyTo(T[], int) Collection<T>.GetEnumerator() Collection<T>.IndexOf(T) Collection<T>.Insert(int, T) Collection<T>.Remove(T) Collection<T>.RemoveAt(int) Collection<T>.Count Collection<T>.this[int] Collection<T>.Items object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Ext.Distinct<T, TKey>(IEnumerable<T>, Func<T, TKey>) Ext.ForEach<T>(IEnumerable<T>, Action<T>) Ext.Foreach<T>(IEnumerable<T>, Action<T>) Ext.RouteFirst<T>(IEnumerable<T>, T) Ext.SplitBy<T, V>(IEnumerable<T>, Func<T, V>) Ext.ToHashSetExt<T>(IEnumerable<T>) Ext.ToObservableCollection<T>(IEnumerable<T>) Ext.ToReadOnlyList<T>(IEnumerable<T>) Ext.WithIndexIsLast<T>(IEnumerable<T>) Ext.WithIndex<T>(IEnumerable<T>) Ext.Sort<TSource, TKey>(ObservableCollection<TSource>, Func<TSource, TKey>, bool) Examples \\snippet ObservableCollection/ObservableCollectionTest_0001.cs example Constructors ObservableCollection2() public ObservableCollection2() ObservableCollection2(IEnumerable<T>) public ObservableCollection2(IEnumerable<T> items) Parameters items IEnumerable<T> Methods ClearItems() override clear items protected override void ClearItems() InsertItem(int, T) protected override void InsertItem(int index, T item) Parameters index int item T RemoveItem(int) protected override void RemoveItem(int index) Parameters index int SetItem(int, T) protected override void SetItem(int index, T item) Parameters index int item T Events ItemReplaced an item was replaced public event EventHandler<(object? oldItem, object? newItem)>? ItemReplaced Event Type EventHandler<(object oldItem, object newItem)> ItemsAdded one or more items added public event EventHandler<IList>? ItemsAdded Event Type EventHandler<IList> ItemsRemoved one or more items removed public event EventHandler<IList>? ItemsRemoved Event Type EventHandler<IList>"
  },
  "api/SearchAThing.Ext.PaperSize.html": {
    "href": "api/SearchAThing.Ext.PaperSize.html",
    "title": "Class PaperSize | netcore-ext",
    "keywords": "Class PaperSize Namespace SearchAThing.Ext Assembly netcore-ext.dll hold paper size info public class PaperSize Inheritance object PaperSize Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Constructors PaperSize(PaperSizeEnum) paper size by given type public PaperSize(PaperSizeEnum type) Parameters type PaperSizeEnum PaperSize(double, double) custom paper size public PaperSize(double widthMM, double heightMM) Parameters widthMM double heightMM double Fields A0 841 x 1189 mm public static readonly PaperSize A0 Field Value PaperSize A1 594 x 841 mm public static readonly PaperSize A1 Field Value PaperSize A10 26 x 37 mm public static readonly PaperSize A10 Field Value PaperSize A2 420 x 594 mm public static readonly PaperSize A2 Field Value PaperSize A3 297 x 420 mm public static readonly PaperSize A3 Field Value PaperSize A4 210 x 297 mm public static readonly PaperSize A4 Field Value PaperSize A5 148.5 x 210 mm public static readonly PaperSize A5 Field Value PaperSize A6 105 x 148.5 mm public static readonly PaperSize A6 Field Value PaperSize A7 74 x 105 mm public static readonly PaperSize A7 Field Value PaperSize A8 52 x 74 mm public static readonly PaperSize A8 Field Value PaperSize A9 37 x 52 mm public static readonly PaperSize A9 Field Value PaperSize Properties HeightMM paper height[mm] public double HeightMM { get; } Property Value double Type peper type public PaperSizeEnum Type { get; } Property Value PaperSizeEnum WidthMM paper width [mm] public double WidthMM { get; } Property Value double"
  },
  "api/SearchAThing.Ext.PaperSizeEnum.html": {
    "href": "api/SearchAThing.Ext.PaperSizeEnum.html",
    "title": "Enum PaperSizeEnum | netcore-ext",
    "keywords": "Enum PaperSizeEnum Namespace SearchAThing.Ext Assembly netcore-ext.dll standard paper sizes public enum PaperSizeEnum Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Ext.ToBytes<T>(T) Fields A0 = 0 841 x 1189 mm A1 = 1 594 x 841 mm A10 = 10 26 x 37 mm A2 = 2 420 x 594 mm A3 = 3 297 x 420 mm A4 = 4 210 x 297 mm A5 = 5 148.5 x 210 mm A6 = 6 105 x 148.5 mm A7 = 7 74 x 105 mm A8 = 8 52 x 74 mm A9 = 9 37 x 52 mm Custom = 11 custom width x height mm"
  },
  "api/SearchAThing.Ext.RStruct-1.html": {
    "href": "api/SearchAThing.Ext.RStruct-1.html",
    "title": "Class RStruct<T> | netcore-ext",
    "keywords": "Class RStruct<T> Namespace SearchAThing.Ext Assembly netcore-ext.dll encapsulate a value type object into a reference type in an immutable way; implicit conversion operator allow to access enclosed type public class RStruct<T> where T : struct Type Parameters T encapsulate a value type object into a reference type in an immutable way; implicit conversion operator allow to access enclosed type Inheritance object RStruct<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Constructors RStruct(T) public RStruct(T value) Parameters value T Properties Value public T Value { get; } Property Value T Methods ToString() public override string ToString() Returns string Operators implicit operator T(RStruct<T>) public static implicit operator T(RStruct<T> x) Parameters x RStruct<T> Returns T"
  },
  "api/SearchAThing.Ext.RandomPasswordOptions.html": {
    "href": "api/SearchAThing.Ext.RandomPasswordOptions.html",
    "title": "Class RandomPasswordOptions | netcore-ext",
    "keywords": "Class RandomPasswordOptions Namespace SearchAThing.Ext Assembly netcore-ext.dll to generate a pin use follow config ( AllowLetter = false, AtLeastOneUppercase = false, Length = 4 ) public class RandomPasswordOptions Inheritance object RandomPasswordOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Properties AllowLetter default: true public bool AllowLetter { get; set; } Property Value bool AllowLowercase default: true public bool AllowLowercase { get; set; } Property Value bool AllowNumber default: true public bool AllowNumber { get; set; } Property Value bool AllowSpecial default: false public bool AllowSpecial { get; set; } Property Value bool AllowUppercase default: true public bool AllowUppercase { get; set; } Property Value bool AtLeastOneNumber default: true public bool AtLeastOneNumber { get; set; } Property Value bool AtLeastOneSpecial default: false public bool AtLeastOneSpecial { get; set; } Property Value bool AtLeastOneUppercase default: true public bool AtLeastOneUppercase { get; set; } Property Value bool AvoidChars avoid ambigous chars for example : new[] { 'l', 'I', 'O', '0' } default: null public char[] AvoidChars { get; set; } Property Value char[] Length default: 12 public int Length { get; set; } Property Value int LoopCount default: 0 public int LoopCount { get; } Property Value int MaxSpecial default: 1 public int MaxSpecial { get; set; } Property Value int"
  },
  "api/SearchAThing.Ext.ReadOnlyHashSet-1.html": {
    "href": "api/SearchAThing.Ext.ReadOnlyHashSet-1.html",
    "title": "Class ReadOnlyHashSet<T> | netcore-ext",
    "keywords": "Class ReadOnlyHashSet<T> Namespace SearchAThing.Ext Assembly netcore-ext.dll enclose hashset to a readonly collection public class ReadOnlyHashSet<T> : IReadOnlyHashSet<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters T enclose hashset to a readonly collection Inheritance object ReadOnlyHashSet<T> Implements IReadOnlyHashSet<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Ext.Distinct<T, TKey>(IEnumerable<T>, Func<T, TKey>) Ext.ForEach<T>(IEnumerable<T>, Action<T>) Ext.Foreach<T>(IEnumerable<T>, Action<T>) Ext.RouteFirst<T>(IEnumerable<T>, T) Ext.SplitBy<T, V>(IEnumerable<T>, Func<T, V>) Ext.ToHashSetExt<T>(IEnumerable<T>) Ext.ToObservableCollection<T>(IEnumerable<T>) Ext.ToReadOnlyList<T>(IEnumerable<T>) Ext.WithIndexIsLast<T>(IEnumerable<T>) Ext.WithIndex<T>(IEnumerable<T>) Constructors ReadOnlyHashSet(HashSet<T>) public ReadOnlyHashSet(HashSet<T> hs) Parameters hs HashSet<T> Properties Count public int Count { get; } Property Value int Methods Contains(T) public bool Contains(T x) Parameters x T Returns bool GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T>"
  },
  "api/SearchAThing.Ext.StringWrapper.html": {
    "href": "api/SearchAThing.Ext.StringWrapper.html",
    "title": "Class StringWrapper | netcore-ext",
    "keywords": "Class StringWrapper Namespace SearchAThing.Ext Assembly netcore-ext.dll wrapper for memory optimized string argument passing public class StringWrapper Inheritance object StringWrapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Constructors StringWrapper(string) public StringWrapper(string str) Parameters str string Fields str public string str Field Value string Methods LineReader() public StringWrapperLineReader LineReader() Returns StringWrapperLineReader Lines() public IEnumerable<string> Lines() Returns IEnumerable<string> ToString() public override string ToString() Returns string"
  },
  "api/SearchAThing.Ext.StringWrapperLineReader.html": {
    "href": "api/SearchAThing.Ext.StringWrapperLineReader.html",
    "title": "Class StringWrapperLineReader | netcore-ext",
    "keywords": "Class StringWrapperLineReader Namespace SearchAThing.Ext Assembly netcore-ext.dll public class StringWrapperLineReader Inheritance object StringWrapperLineReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Constructors StringWrapperLineReader(StringWrapper) public StringWrapperLineReader(StringWrapper strw) Parameters strw StringWrapper Properties Strw public StringWrapper Strw { get; } Property Value StringWrapper Methods GetNext() public StringWrapper GetNext() Returns StringWrapper HasNext() public bool HasNext() Returns bool"
  },
  "api/SearchAThing.Ext.Toolkit.AllowedDateTimeOffsetRange.html": {
    "href": "api/SearchAThing.Ext.Toolkit.AllowedDateTimeOffsetRange.html",
    "title": "Class Toolkit.AllowedDateTimeOffsetRange | netcore-ext",
    "keywords": "Class Toolkit.AllowedDateTimeOffsetRange Namespace SearchAThing.Ext Assembly netcore-ext.dll public class Toolkit.AllowedDateTimeOffsetRange Inheritance object Toolkit.AllowedDateTimeOffsetRange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Constructors AllowedDateTimeOffsetRange(DateTimeOffset, DateTimeOffset) public AllowedDateTimeOffsetRange(DateTimeOffset from, DateTimeOffset to) Parameters from DateTimeOffset to DateTimeOffset AllowedDateTimeOffsetRange(int, int) public AllowedDateTimeOffsetRange(int yearFrom, int yearTo) Parameters yearFrom int yearTo int Properties From public DateTimeOffset From { get; } Property Value DateTimeOffset To public DateTimeOffset To { get; } Property Value DateTimeOffset"
  },
  "api/SearchAThing.Ext.Toolkit.html": {
    "href": "api/SearchAThing.Ext.Toolkit.html",
    "title": "Class Toolkit | netcore-ext",
    "keywords": "Class Toolkit Namespace SearchAThing.Ext Assembly netcore-ext.dll public static class Toolkit Inheritance object Toolkit Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields UnixTimeAutoAmbiguityFrom public static readonly DateTimeOffset UnixTimeAutoAmbiguityFrom Field Value DateTimeOffset UnixTimeAutoAmbiguityTo public static readonly DateTimeOffset UnixTimeAutoAmbiguityTo Field Value DateTimeOffset Methods AppDataFolder(string) {AppData}/{namespace}/{assembly_name} public static string AppDataFolder(string ns) Parameters ns string Returns string Assign<T>(T, T, Func<PropertyInfo, bool>?) assign public properties of src to dst object public static void Assign<T>(T src, T dst, Func<PropertyInfo, bool>? exclude = null) Parameters src T dst T exclude Func<PropertyInfo, bool> Type Parameters T CopyFromCustom<T>(T, T, CopyFromCustomDelegate?) copy properties from other object ; a custom non null delegate function can be passed to specify if include a property and if to assign a custom value ( useful for complex, array types ) public static T CopyFromCustom<T>(T obj, T other, CopyFromCustomDelegate? custom = null) Parameters obj T other T custom CopyFromCustomDelegate Returns T Type Parameters T CopyFromExclude<T>(T, T, params string[]) copy properties from other object excluding those with given names public static T CopyFromExclude<T>(T obj, T other, params string[] exclude_names) Parameters obj T other T exclude_names string[] Returns T Type Parameters T CopyFromInclude<T>(T, T, params string[]) copy properties from other object including only those with given names public static T CopyFromInclude<T>(T obj, T other, params string[] include_names) Parameters obj T other T include_names string[] Returns T Type Parameters T CopyFrom<T>(T, T, Func<PropertyInfo, bool>?) copy properties from other object ; if match functor specified it copies only matched properties public static T CopyFrom<T>(T obj, T other, Func<PropertyInfo, bool>? match = null) Parameters obj T destination other T source match Func<PropertyInfo, bool> if specified allow to copy only matching props Returns T Type Parameters T CreateComparer<T>(T, Comparison<T>) Anonymous Comparer. create an IComparer from given comparison expression. first dummy argument used to infer the type T. public static IComparer<T> CreateComparer<T>(T sample, Comparison<T> comparison) Parameters sample T dummy element to infer the type T comparison Comparison<T> (a,b) => { -1, 0, 1 } Returns IComparer<T> Type Parameters T DeflateEmbeddedResource(Assembly, string) deflate embedded resource public static Stream? DeflateEmbeddedResource(Assembly assembly, string resource) Parameters assembly Assembly resource string Returns Stream EnsureFolder(string) Ensure given folder path exists. public static string EnsureFolder(string path) Parameters path string Returns string Exec(string, IEnumerable<string>, CancellationToken, bool, bool, bool, bool) start a process in background redirecting standard output, error; a cancellation token can be supplied to cancel underlying process public static Task<ExecResult> Exec(string cmd, IEnumerable<string> args, CancellationToken ct, bool sudo = false, bool redirectStdout = true, bool redirectStderr = true, bool verbose = false) Parameters cmd string cmd to execute args IEnumerable<string> cmd arguments ( array of strings ) ct CancellationToken cancellation token sudo bool true if sudo required redirectStdout bool redirect process stdout and grab into output redirectStderr bool redirect process stderr and grab into error verbose bool if true prints command and args used Returns Task<ExecResult> Examples \\snippet exec/Program.cs example ExecNoRedirect(string, IEnumerable<string>, CancellationToken, bool, bool) start a process in background without redirecting standard output, error; a cancellation token can be supplied to cancel underlying process public static Task<ExecResult> ExecNoRedirect(string cmd, IEnumerable<string> args, CancellationToken ct, bool sudo = false, bool verbose = false) Parameters cmd string args IEnumerable<string> ct CancellationToken sudo bool verbose bool Returns Task<ExecResult> ExecRedirect(string, IEnumerable<string>, CancellationToken, bool, bool) start a process in background redirecting standard output, error; a cancellation token can be supplied to cancel underlying process public static Task<ExecResult> ExecRedirect(string cmd, IEnumerable<string> args, CancellationToken ct, bool sudo = false, bool verbose = false) Parameters cmd string args IEnumerable<string> ct CancellationToken sudo bool verbose bool Returns Task<ExecResult> ExecRedirectError(string, IEnumerable<string>, CancellationToken, bool, bool) start a process in background redirecting standard error; a cancellation token can be supplied to cancel underlying process public static Task<ExecResult> ExecRedirectError(string cmd, IEnumerable<string> args, CancellationToken ct, bool sudo = false, bool verbose = false) Parameters cmd string args IEnumerable<string> ct CancellationToken sudo bool verbose bool Returns Task<ExecResult> FromUnixTimeAuto(long, AllowedDateTimeOffsetRange, AllowedDateTimeOffsetRange?) Guess if given unix time is seconds or milliseconds given a validity range of dates that must fall out of ambiguity range [1968-01-12T20:06:43.2Z, 1978-01-11T21:31:40.799Z] where tests could overlap and no decision can be assumed. public static DateTimeOffset FromUnixTimeAuto(long value, Toolkit.AllowedDateTimeOffsetRange allowedRangeA, Toolkit.AllowedDateTimeOffsetRange? allowedRangeB = null) Parameters value long allowedRangeA Toolkit.AllowedDateTimeOffsetRange allowedRangeB Toolkit.AllowedDateTimeOffsetRange Returns DateTimeOffset Remarks If unix time is in the ambiguity range [UnixTimeAutoAmbiguityFrom,UnixTimeAutoAmbiguityTo] it can't be guessed and an exception is thrown. Out of the ambiguity it can be guessed given an allowable date ranges because these would not overlaps. Discussion: https://stackoverflow.com/a/77809656/5521766 GetEmbeddedFileContentBytes(Assembly, string) retrieve embedded resource file content and read into a byte array public static byte[]? GetEmbeddedFileContentBytes(Assembly assembly, string resourceName) Parameters assembly Assembly assembly that contains given resourceName resourceName string name of resource (eg. namespace.filename.ext) Returns byte[] GetEmbeddedFileContentString(Assembly, string) retrieve embedded resource file content and read into a string public static string GetEmbeddedFileContentString(Assembly assembly, string resourceName) Parameters assembly Assembly assembly that contains given resourceName resourceName string name of resource (eg. namespace.filename.ext) Returns string GetEmbeddedFileContentString<T>(string) retrieve embedded resource file content and read into a string public static string GetEmbeddedFileContentString<T>(string resourceName) where T : class Parameters resourceName string name of resource (eg. namespace.filename.ext) Returns string Type Parameters T Type for which lookup assembly (eg. namespace.classname) GetEmbeddedResourceNames(Assembly?) retrieve calling assembly resource names public static IEnumerable<string> GetEmbeddedResourceNames(Assembly? assembly = null) Parameters assembly Assembly Returns IEnumerable<string> GetEmbeddedResourcesList<T>() retrieve the list of embedded resource names from given Type public static string[] GetEmbeddedResourcesList<T>() where T : class Returns string[] Type Parameters T Type for which lookup assembly (eg. namespace.classname) GetMemberName<T>(Expression<Func<T, object>>) retrieve member name from a functor like `x=>x.membername1 public static string GetMemberName<T>(Expression<Func<T, object>> membersExpr) Parameters membersExpr Expression<Func<T, object>> Returns string Type Parameters T GetMemberName<T>(T, Expression<Func<T, object>>) retrieve member name from a functor like `x=>x.membername1 public static string GetMemberName<T>(T obj, Expression<Func<T, object>> membersExpr) Parameters obj T membersExpr Expression<Func<T, object>> Returns string Type Parameters T GetMemberNamesExt<T>(Expression<Func<T, object>>) retrieve list of member names from a functor like x=>new {x.membername1, x.membername2, ...} or x=>x.membername public static IEnumerable<string> GetMemberNamesExt<T>(Expression<Func<T, object>> membersExpr) Parameters membersExpr Expression<Func<T, object>> Returns IEnumerable<string> Type Parameters T GetMemberNames<T>(Expression<Func<T, object>>) retrieve list of member names from a functor like x=>new {x.membername1, x.membername2, ...} or x=>x.membername public static HashSet<string> GetMemberNames<T>(Expression<Func<T, object>> membersExpr) Parameters membersExpr Expression<Func<T, object>> Returns HashSet<string> Type Parameters T GetMemberNames<T>(T, Expression<Func<T, object>>) retrieve list of member names from a functor like x=>new {x.membername1, x.membername2, ...} or x=>x.membername public static HashSet<string> GetMemberNames<T>(T obj, Expression<Func<T, object>> membersExpr) Parameters obj T membersExpr Expression<Func<T, object>> Returns HashSet<string> Type Parameters T GetVarName<T>(Expression<Func<T>>) retrieve name of var at runtime with GetVarName(() => variable) public static string GetVarName<T>(Expression<Func<T>> varNameExpression) Parameters varNameExpression Expression<Func<T>> Returns string Type Parameters T ParentPath(string, string) search given stopAtFolderName directory searching backward from the given beginPathname folder public static string? ParentPath(string beginPathname, string stopAtFolderName) Parameters beginPathname string stopAtFolderName string Returns string RandomPassword(RandomPasswordOptions?) Generate random password using defaults ( allow numbers, lowercase, uppercase, 12 of length, no special symbol ) public static string RandomPassword(RandomPasswordOptions? opts = null) Parameters opts RandomPasswordOptions Returns string Examples \\snippet random-password/Program.cs example SaveEmbeddedResourceToFile(string, string, bool) save given embedded resource to file public static bool SaveEmbeddedResourceToFile(string resource, string dstPathfilename, bool deflate = false) Parameters resource string dstPathfilename string deflate bool Returns bool SearchInPath(string) Search given filename in the PATH public static string? SearchInPath(string filename) Parameters filename string Returns string null if not found Swap<T>(ref T, ref T) swap x, y values public static void Swap<T>(ref T x, ref T y) Parameters x T y T Type Parameters T TailLike(string, bool, CancellationToken?, int) Tail-like method to gather file incoming lines public static IEnumerable<string> TailLike(string pathfilename, bool seekEnd = true, CancellationToken? ct = null, int BUFSIZE = 1024) Parameters pathfilename string source pathfilename to tail seekEnd bool if false read from beginning (default:true) ct CancellationToken? optional cancellation token to control stop of tail loop BUFSIZE int read buffer size (default:1024) Returns IEnumerable<string> return incoming lines from given file Examples \\snippet tail-like/Program.cs example XorNull(object, object) returns true if only one of given objects is null; returns false if all objects null or all objects not null; public static bool XorNull(object a, object b) Parameters a object b object Returns bool"
  },
  "api/SearchAThing.Ext.ValueObj-1.html": {
    "href": "api/SearchAThing.Ext.ValueObj-1.html",
    "title": "Class ValueObj<T> | netcore-ext",
    "keywords": "Class ValueObj<T> Namespace SearchAThing.Ext Assembly netcore-ext.dll useful if need to store quick tuple values into a list or dictionary and allowing further modification; without this retrieved tuple will a copy-value and tuple in collection remains unmodified. public class ValueObj<T> Type Parameters T useful if need to store quick tuple values into a list or dictionary and allowing further modification; without this retrieved tuple will a copy-value and tuple in collection remains unmodified. Inheritance object ValueObj<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Ext.Act<T>(T, Action<T>) Ext.Fn<T, U>(T, Func<T, U>) Constructors ValueObj(T) public ValueObj(T x) Parameters x T Properties Value public T Value { get; set; } Property Value T"
  },
  "api/SearchAThing.Ext.html": {
    "href": "api/SearchAThing.Ext.html",
    "title": "Namespace SearchAThing.Ext | netcore-ext",
    "keywords": "Namespace SearchAThing.Ext Classes ExecResult results of process executio Ext HSObservableCollection<T> ObservableCollection backed with hashset for the Contains test. InternalError InternalError exception ObservableCollection2<T> ObservableCollection specialized with ItemsAdded, ItemsRemoved that allow to track for Clear, Remove, Insert, Set actions PaperSize hold paper size info RStruct<T> encapsulate a value type object into a reference type in an immutable way; implicit conversion operator allow to access enclosed type RandomPasswordOptions to generate a pin use follow config ( AllowLetter = false, AtLeastOneUppercase = false, Length = 4 ) ReadOnlyHashSet<T> enclose hashset to a readonly collection StringWrapper wrapper for memory optimized string argument passing StringWrapperLineReader Toolkit Toolkit.AllowedDateTimeOffsetRange ValueObj<T> useful if need to store quick tuple values into a list or dictionary and allowing further modification; without this retrieved tuple will a copy-value and tuple in collection remains unmodified. Interfaces INotifyCollectionChanged2 IReadOnlyHashSet<T> Enums ColumnAlignment generic enum for column alignment description PaperSizeEnum standard paper sizes Delegates CopyFromCustomDelegate"
  },
  "data/pages/main.html": {
    "href": "data/pages/main.html",
    "title": "| netcore-ext",
    "keywords": "\\mainpage netcore-ext Main page description. Sources Extensions Toolkit Usings: global using SearchAThing.Ext; global using static SearchAThing.Ext.Toolkit; Examples: Example Keywords Description exec process execute process redirecting stdout random-password security generate some random pass tail-like stream like tail -f /var/log/syslog with-index-is-last enum enumerate (idx, item) items"
  },
  "index.html": {
    "href": "index.html",
    "title": "netcore-ext | netcore-ext",
    "keywords": "netcore-ext api sources"
  }
}